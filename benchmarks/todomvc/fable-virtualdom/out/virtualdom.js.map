{"version":3,"sources":["../virtualdom.fsx"],"names":[],"mappings":"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","file":"virtualdom.js","sourcesContent":["#r \"node_modules/fable-core/Fable.Core.dll\"\n#load \"node_modules/fable-import-virtualdom/Fable.Helpers.Virtualdom.fs\"\n\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\n\nopen Fable.Helpers.Virtualdom\nopen Fable.Helpers.Virtualdom.App\nopen Fable.Helpers.Virtualdom.Html\n\n// Todo model\ntype Filter =\n    | All\n    | Completed\n    | Active\n\ntype Item =\n    {\n        Name: string\n        Done: bool\n        Id: int\n        IsEditing: bool\n    }\n\ntype TodoModel =\n    {\n        Items: Item list\n        Input: string\n        Filter: Filter\n    }\n\n// Todo update\ntype TodoAction =\n    | Nop\n    | AddItem\n    | ChangeInput of string\n    | MarkAsDone of Item\n    | ToggleItem of Item\n    | Destroy of Item\n    | CheckAll\n    | UnCheckAll\n    | SetActiveFilter of Filter\n    | ClearCompleted\n    | EditItem of Item\n    | SaveItem of Item*string\n\nlet todoUpdate model msg =\n    let checkAllWith v =\n        let items' =\n            model.Items\n            |> List.map (fun i -> { i with Done = v })\n        {model with Items = items'}\n\n    let updateItem i model =\n        let items' =\n            model.Items |> List.map (fun i' ->\n                if i'.Id <> i.Id then i' else i)\n        {model with Items = items'}\n\n    let model' =\n        match msg with\n        | AddItem ->\n            let maxId =\n                if model.Items |> List.isEmpty then 1\n                else\n                    model.Items\n                    |> List.map (fun x -> x.Id)\n                    |> List.max\n            let item' = {\n                Id = maxId + 1\n                Name = model.Input\n                Done = false\n                IsEditing = false}\n            {model with Items = item'::model.Items; Input = \"\"}\n        | ChangeInput v -> {model with Input = v}\n        | MarkAsDone i ->\n            let items' =\n                model.Items |> List.map (fun i' ->\n                    if i' <> i then i'\n                    else {i with Done = true})\n            {model with Items = items'}\n        | CheckAll -> checkAllWith true\n        | UnCheckAll -> checkAllWith false\n        | Destroy i ->\n            let items' =\n                model.Items |> List.filter (fun i' -> i'.Id <> i.Id)\n            {model with Items = items'}\n        | ToggleItem i ->\n            updateItem {i with Done = not i.Done} model\n        | SetActiveFilter f ->\n            { model with Filter = f }\n        | ClearCompleted ->\n            let items' =\n                model.Items |> List.filter (fun i -> not i.Done)\n            { model with Items = items'}\n        | EditItem i ->\n            updateItem { i with IsEditing = true} model\n        | SaveItem (i,str) ->\n            updateItem { i with Name = str; IsEditing = false} model\n        | Nop -> model\n\n    let jsCalls =\n        match msg with\n        | EditItem i -> [fun () ->\n            document.getElementById(\"item-\" + (i.Id.ToString())).focus()]\n        | _ -> []\n    model',jsCalls\n\n// Todo view\nlet filterToTextAndUrl = function\n    | All -> \"All\", \"\"\n    | Completed -> \"Completed\", \"completed\"\n    | Active -> \"Active\", \"active\"\n\nlet filter activeFilter f =\n    let linkClass = if f = activeFilter then \"selected\" else \"\"\n    let fText,url = f |> filterToTextAndUrl\n    li\n        [ onMouseClick (fun _ -> SetActiveFilter f)]\n        [ a\n            [ attribute \"href\" (\"#/\" + url); attribute \"class\" linkClass ]\n            [ text fText] ]\n\nlet filters model =\n    ul\n        [ attribute \"class\" \"filters\" ]\n        ([ All; Active; Completed ] |> List.map (filter model.Filter))\n\nlet todoFooter model =\n    let clearVisibility =\n        if model.Items |> List.exists (fun i -> i.Done)\n        then \"\"\n        else \"none\"\n    let activeCount =\n        model.Items\n        |> List.filter (fun i -> not i.Done)\n        |> List.length |> string\n    footer\n        [   attribute \"class\" \"footer\"; Style [\"display\",\"block\"]]\n        [   span\n                [   attribute \"class\" \"todo-count\" ]\n                [   strong [] [text activeCount]\n                    text \" items left\" ]\n            (filters model)\n            button\n                [   attribute \"class\" \"clear-completed\"\n                    Style [ \"display\", clearVisibility ]\n                    onMouseClick (fun _ -> ClearCompleted)]\n                [ text \"Clear completed\" ] ]\n\nlet todoHeader model =\n    header\n        [attribute \"class\" \"header\"]\n        [   h1 [] [text \"todos\"]\n            input [ attribute \"class\" \"new-todo\"\n                    attribute \"id\" \"new-todo\"\n                    property \"value\" model\n                    property \"placeholder\" \"What needs to be done?\"\n                    onEvent \"oninput\" (fun x -> console.debug(sprintf \"%A\" x); ChangeInput (x?target?value :?> string))\n                    onKeydown (fun x ->\n                        if x.keyCode = 13\n                        then AddItem\n                        else Nop )]]\nlet listItem item =\n    let itemChecked = if item.Done then \"true\" else \"\"\n    let editClass = if item.IsEditing then \"editing\" else \"\"\n    li [ attribute \"class\" ((if item.Done then \"completed \" else \" \") + editClass)]\n       [ div [  attribute \"class\" \"view\"\n                onDblClick (fun x -> EditItem item) ]\n             [ input [  property \"className\" \"toggle\"\n                        property \"type\" \"checkbox\"\n                        property \"checked\" itemChecked\n                        onMouseClick (fun e -> ToggleItem item) ]\n               label [] [ text item.Name ]\n               button [ attribute \"class\" \"destroy\"\n                        onMouseClick (fun e -> Destroy item) ] [] ]\n         input [ attribute \"class\" \"edit\"\n                 attribute \"value\" item.Name\n                 property \"id\" (\"item-\"+item.Id.ToString())\n                 onBlur (fun e -> SaveItem (item, (e?target?value :?> string))) ] ]\n\nlet itemList items activeFilter =\n    let filterItems i =\n        match activeFilter with\n        | All -> true\n        | Completed -> i.Done\n        | Active -> not i.Done\n\n    ul [attribute \"class\" \"todo-list\" ]\n       (items |> List.filter filterItems |> List.map listItem)\n\nlet todoMain model =\n    let items = model.Items\n    let allChecked = items |> List.exists (fun i -> not i.Done)\n    section [  attribute \"class\" \"main\"\n               Style [ \"style\", \"block\" ] ]\n            [   input [ property \"id\" \"toggle-all\"\n                        attribute \"class\" \"toggle-all\"\n                        property \"type\" \"checkbox\"\n                        property \"checked\" (if not allChecked then \"true\" else \"\")\n                        onMouseClick (fun e ->\n                                    if allChecked\n                                    then CheckAll\n                                    else UnCheckAll) ]\n                label [ attribute \"for\" \"toggle-all\" ]\n                      [ text \"Mark all as complete\" ]\n                (itemList items model.Filter) ]\n\nlet todoView model =\n    section\n        [property \"class\" \"todoapp\"]\n        ((todoHeader model.Input)::(if model.Items |> List.isEmpty\n                then []\n                else [  (todoMain model)\n                        (todoFooter model) ] ))\n\n// Storage\nmodule Storage =\n    let private STORAGE_KEY = \"vdom-storage\"\n    open Microsoft.FSharp.Core\n    let fetch<'T> (): 'T [] =\n        Browser.localStorage.getItem(STORAGE_KEY)\n        |> function null -> \"[]\" | x -> unbox x\n        |> JS.JSON.parse |> unbox\n\n    let save<'T> (todos: 'T []) =\n        Browser.localStorage.setItem(STORAGE_KEY, JS.JSON.stringify todos)\n\nopen Storage\nlet initList = fetch<Item>() |> List.ofArray\nlet initModel = {Filter = All; Items = initList; Input = \"\"}\n\nlet todoApp =\n    createApp {Model = initModel; View = todoView; Update = todoUpdate}\n//    |> (withSubscriber \"storagesub\" (function\n//            | ModelChanged (newModel,old) ->\n//                save (newModel.Items |> Array.ofList)\n//            | _ -> ()))\n//    |> (withSubscriber \"modellogger\" (printfn \"%A\"))\n    |> withStartNode \"#todo\"\n\ntodoApp |> start renderer\n"]}