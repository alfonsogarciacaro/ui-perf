{"version":3,"sources":["../../node_modules/fable-import-virtualdom/Fable.Helpers.Virtualdom.fs"],"names":[],"mappings":";;;;;;;;;;;;;;AAiBO;AAEI;AACE,mDApBb;AAAA;;AAAA;AAAA;AAAA;AAAA,aAoBa;;AADF;;AAOE,yDA1Bb;AAAA;;AAAA;AAAA;AAAA,aA0Ba;;AAPF;;AAiBE,qEApCb;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,aAoCa;;AAjBF;;AA0BE,iDA7Cb;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,aA6Ca;;AA1BF;;AAmCE,uCAtDb;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,aAsDa;;AAnCF;;AAAA;AAnBX,SAmBW;;AAgDA;AAAA;AAAI,SAAJ;;AAuIA;AAAA;AAAU,SAAV;;AAKA;AAAA;AAAM,SAAN;;AA0FA;AACC,yCAAQ;AAAA;AAA4D,aAApE;;AADD;AACM,SADN;;AAxRJ;AAyRU,KAzRV;;AA8SA;AACE,2CAhUT;AAAA;;AAAA;AAAA;AAAA;AAAA,SAgUS;;AADF;;AAOE,6CAtUT;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,SAsUS;;AAPF;;AAcE,iDA7UT;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,SA6US;;AAdF;;AAkBE,iCAjVT;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAiVS;;AAlBF;;AA6BE,yDA5VT;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,SA4VS;;AA7BF;;AAgCE,+CA/VT;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,SA+VS;;AAhCF;;AAsCE,2CArWT;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,SAqWS;;AAtCF;;AA8CC,6CACA;AAAA,qCAEc,qBAFd,cAKkB,SALlB,QAOkB,4BAPlB;AAQC,SATD;;AAWA,qDAA6B;AAAA;AAAA;AAAyC,SAAtE;;AACA,uDACI;AAAa,6BAAmB;AAAA;AAAA,aAAnB;;AACjB;AADc,SADd;;AAIA,yDACA;AAAA,qDACI;AACI;AAAA;AAAA,8CACI;AAAA,iDAAe,eAAf,EACA;AAAA;AAAM;AAAA;AAEF;AACA,2DAAQ,MAAR;AAAc,6BAJlB;AAAA,yBADJ;AAAA;AAAA;;AAOJ;AAAM,aATV;AAUC,SAXD;;AAaA,qCACI;AACA;AAAA;AAAA;AAAA,+BACG,wBADH;AAAA;AAAA;AAAA;;AAIM;AAAA;;AAAA,wCAEQ;AAAA;AAAA;AAAgD,iBAFxD,MACI;AAAA;AAAa;AADD,aAAhB;;AAKM;AAChB,qDACQ;AACA;AAAA,+BAAY,kCAAZ;AAA4B,iBAA5B;;AAGQ;AAAA;AAAA,4CAA6B;AAAA;AAAa,yBAA1C;AAA2C,qBAA3C;AAAA;;AAGR;AAAA;AAAA,8CACU;AAAA;;AAAA;AAAA;AAMW;AAAf;AACE,yDAAe,eAAf,EAEA;AAAA;;AAAM,wEAEF;AAAA;AAAuB,gFAAvB;AACwB;AAApB;AAAA;;AAGM;AAAA;;AAAA,wFAIU;AAAA;AAAU,iDAJpB,MAEF;AAAA,mEAAe,8BAAO,SAAP,EAA4B;AAAA,mEAAW,sBAAX;AAAgB,qDAA5C,CAAf;AACA;AAAU;AAHS,6CAAjB;;AAKV,uEAAQ,KAAK;AAEM;AAAE;AAAF;AAAsC,iDAAtC;;AAFN,2EAIK,8CAJL;AAI8B,6CAJ9B,EAAL,CAAR;AAI2C,yCAfzC;AAAA,yEAiBI;AAAA;;AAAA,uFAeS;AAAA;AAAA;AAA8B,iDAfvC,MAEF;AAAe,wFAAf;AAEY;AAEE;AACH;AACG;AACd;;AACW,wEAAoB;AAAA;AAAG,qDAAvB;;AAEqC,wFAAhD,CAAC,0DAAD;AAEA,+EAAQ,KAAK;AAA0B;AAA1B;AAAwE;AAAxE;AAA2E,qDAA3E,EAAL,CAAR;AAAwF;AAdrE,6CAjBrB,MAiCC;AAAA,2EAAQ,WAAR;AAAkB;AAjCZ;AAiCY,qCAnCzB;AAP+B,iCAA7B,MA2CC;AAAA;AAAA;AAA2B;AA3CC,6BAA7B,MAEE;AAAO;AACI;AACf;AACA,2DAAQ,KAAK;AAAA;AAAA;AAAA;AAA0D,iCAA1D,EAAL,CAAR;AAHQ;AAFuB,yBADvC;AAAA;AAAA;;AA8CJ;AArDgB,aADpB;AAXiC,SADjC;;AA3ED;AA2EM,KA3EN;;AA+IH,0CACI;AACI;AACA,+BAKI;AAAA,mDAA6B;AAAA;AAAA,0CAAwB,4BAAxB;AAAsC,iBAAtC,EAA7B;AAAA,aALJ,CAIG;AAAA;AAAA,eAHA,oBAAU;AAAA,oDACY;AAAA;AAAA;AAAA;AAAiB,iBAAjB,EADZ;AAAA,aAAV,QAGA,CAJH;;AASG,4CAAU;AAAA,gDAEQ;AAAA;AAAA,qCAAY,gCAAZ;AAAkC,iBAAlC,EAFR,+BAGW;AAAA;AAAA;AAAA;AAAO,iBAAP,EAHX,0CAKC;AAAA;;AAAA,iEAE2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B,qBAFzD;AAAA,6DAGmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B,yBAHjD,MACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AAD/C;AAAA,iBAAP,EALD,GACQ;AAAA;AAA2B,iBAA3B,EADR;AAAA,aAAV,EADA,uBAAa;AAAA;AAAA,aAAb,QACA;;AAWP,mBAIa;AAAA;AAAwC,aAJrD,CAGG,0BAHG,uBAEM;AAAA;AAAA;AAAQ,aAAR,EAFN,QAGH,CAHH;AArBgB,SAAZ;;AA0BG,2CAAO,mBAAP,EAA2B,oBAA3B;AA3BP;AAAkC,KADtC;;AAgCI,kCACE;AAEuB;AAAA,mDAAuC,oBAAU;AAAA;AAAA,aAAV,QAAvC;AAAA;;AAFvB;AAAA;AAAI,SAAJ;AAAA,6CAGwB;AAAA;AAAA;AAAA,uDAA6B,qBAA7B;AAA+B,aAHvD;AAAA,0CAIQ;AAAA;AAAA;AAAe,iBAJvB;AAAA,oDAKc;AAAA;AAAA;AAAe,qBAL7B;AAAA;AAAI;AAAA;AAAA;AAAA;AAAA,KADN;;AAQJ,sCACA;AAAA,gCACa;AAAA;AAAA;AAAA;AAAA,SADb,EAEW;AAAA;AAAA;AAAA;AAAA,SAFX,EAGY;AAAA;AAAA;AAAA;AAAA,SAHZ,EAIoB;AAAA;AAAA,SAJpB;AAKC,KAND","file":"Fable.Helpers.Virtualdom-512801703.js","sourcesContent":["module Fable.Helpers.Virtualdom\n\nopen Fable.Core\nopen System.Diagnostics\n\n[<Import(\"h\",\"virtual-dom\")>]\nlet h(arg1: string, arg2: obj, arg3: obj[]): obj = failwith \"JS only\"\n\n[<Import(\"diff\",\"virtual-dom\")>]\nlet diff (tree1:obj) (tree2:obj): obj = failwith \"JS only\"\n\n[<Import(\"patch\",\"virtual-dom\")>]\nlet patch (node:obj) (patches:obj): Fable.Import.Browser.Node = failwith \"JS only\"\n\n[<Import(\"create\",\"virtual-dom\")>]\nlet createElement (e:obj): Fable.Import.Browser.Node = failwith \"JS only\"\n\nmodule Html =\n    [<AutoOpen>]\n    module Types =\n        type MouseEvent =\n            {\n                altKey: bool\n                screenX: int\n                screenY: int\n            }\n        type KeyboardEvent =\n            {\n                code: string\n                keyCode: int\n            }\n\n        type MouseEventHandler<'TMessage> = string*(MouseEvent -> 'TMessage)\n        type KeyboardEventHandler<'TMessage> = string*(KeyboardEvent -> 'TMessage)\n        type EventHandler<'TMessage> = string*(obj -> 'TMessage)\n\n        type EventHandlerBinding<'TMessage> =\n            | MouseEventHandler of MouseEventHandler<'TMessage>\n            | KeyboardEventHandler of KeyboardEventHandler<'TMessage>\n            | EventHandler of EventHandler<'TMessage>\n\n        type Style = (string*string) list\n\n        type KeyValue = string*string\n\n        type Attribute<'TMessage> =\n            | EventHandlerBinding of EventHandlerBinding<'TMessage>\n            | Style of Style\n            | Property of KeyValue\n            | Attribute of KeyValue\n\n        type Element<'TMessage> = string * Attribute<'TMessage> list\n        /// A Node in Html have the following forms\n        type VoidElement<'TMessage> = string * Attribute<'TMessage> list\n        type Node<'TMessage> =\n        /// A regular html element that can contain a list of other nodes\n        | Element of Element<'TMessage> * Node<'TMessage> list\n        /// A void element is one that can't have content, like link, br, hr, meta\n        /// See: https://dev.w3.org/html5/html-author/#void\n        | VoidElement of VoidElement<'TMessage>\n        /// A text value for a node\n        | Text of string\n        /// Whitespace for formatting\n        | WhiteSpace of string\n        | Svg of Element<'TMessage> * Node<'TMessage> list\n\n    [<AutoOpen>]\n    module Tags =\n        let inline elem tagName attrs children = Element((tagName, attrs), children)\n        let inline voidElem tagName attrs = VoidElement(tagName, attrs)\n\n        let inline whiteSpace x = WhiteSpace x\n        let inline text x = Text x\n\n        // Elements - list of elements here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n        // Void elements\n        let inline br x = voidElem \"br\" x\n        let inline area x = voidElem \"area\" x\n        let inline baseHtml x = voidElem \"base\" x\n        let inline col x = voidElem \"col\" x\n        let inline embed x = voidElem \"embed\" x\n        let inline hr x = voidElem \"hr\" x\n        let inline img x = voidElem \"img\" x\n        let inline input x = voidElem \"input\" x\n        let inline link x = voidElem \"link\" x\n        let inline meta x = voidElem \"meta\" x\n        let inline param x = voidElem \"param\" x\n        let inline source x = voidElem \"source\" x\n        let inline track x = voidElem \"track\" x\n        let inline wbr x = voidElem \"wbr\" x\n\n        // Metadata\n        let inline head x = elem \"head\" x\n        let inline style x = elem \"style\" x\n        let inline title x = elem \"title\" x\n\n        // Content sectioning\n        let inline address x = elem \"address\" x\n        let inline article x = elem \"article\" x\n        let inline aside x = elem \"aside\" x\n        let inline footer x = elem \"footer\" x\n        let inline header x = elem \"header\" x\n        let inline h1 x = elem \"h1\" x\n        let inline h2 x = elem \"h2\" x\n        let inline h3 x = elem \"h3\" x\n        let inline h4 x = elem \"h4\" x\n        let inline h5 x = elem \"h5\" x\n        let inline h6 x = elem \"h6\" x\n        let inline hgroup x = elem \"hgroup\" x\n        let inline nav x = elem \"nav\" x\n\n        // Text content\n        let inline dd x = elem \"dd\" x\n        let inline div x = elem \"div\" x\n        let inline dl x = elem \"dl\" x\n        let inline dt x = elem \"dt\" x\n        let inline figcaption x = elem \"figcaption\" x\n        let inline figure x = elem \"figure\" x\n        let inline li x = elem \"li\" x\n        let inline main x = elem \"main\" x\n        let inline ol x = elem \"ol\" x\n        let inline p x = elem \"p\" x\n        let inline pre x = elem \"pre\" x\n        let inline section x = elem \"section\" x\n        let inline ul x = elem \"ul\" x\n\n        // Inline text semantics\n        let inline a x = elem \"a\" x\n        let inline abbr x = elem \"abbr\" x\n        let inline b x = elem \"b\" x\n        let inline bdi x = elem \"bdi\" x\n        let inline bdo x = elem \"bdo\" x\n        let inline cite x = elem \"cite\" x\n        let inline code x = elem \"code\" x\n        let inline data x = elem \"data\" x\n        let inline dfn x = elem \"dfn\" x\n        let inline em x = elem \"em\" x\n        let inline i x = elem \"i\" x\n        let inline kbd x = elem \"kbd\" x\n        let inline mark x = elem \"mark\" x\n        let inline q x = elem \"q\" x\n        let inline rp x = elem \"rp\" x\n        let inline rt x = elem \"rt\" x\n        let inline rtc x = elem \"rtc\" x\n        let inline ruby x = elem \"ruby\" x\n        let inline s x = elem \"s\" x\n        let inline samp x = elem \"samp\" x\n        let inline small x = elem \"small\" x\n        let inline span x = elem \"span\" x\n        let inline strong x = elem \"strong\" x\n        let inline sub x = elem \"sub\" x\n        let inline sup x = elem \"sup\" x\n        let inline time x = elem \"time\" x\n        let inline u x = elem \"u\" x\n        let inline var x = elem \"var\" x\n\n        // Image and multimedia\n        let inline audio x = elem \"audio\" x\n        let inline map x = elem \"map\" x\n        let inline video x = elem \"video\" x\n\n        // Embedded content\n        let inline objectHtml x = elem \"object\" x\n\n        // Demarcasting edits\n        let inline del x = elem \"del\" x\n        let inline ins x = elem \"ins\" x\n\n        // Table content\n        let inline caption x = elem \"caption\" x\n        let inline colgroup x = elem \"colgroup\" x\n        let inline table x = elem \"table\" x\n        let inline tbody x = elem \"tbody\" x\n        let inline td x = elem \"td\" x\n        let inline tfoot x = elem \"tfoot\" x\n        let inline th x = elem \"th\" x\n        let inline thead x = elem \"thead\" x\n        let inline tr x = elem \"tr\" x\n\n        // Forms\n        let inline button x = elem \"button\" x\n        let inline datalist x = elem \"datalist\" x\n        let inline fieldset x = elem \"fieldset\" x\n        let inline form x = elem \"form\" x\n        let inline label x = elem \"label\" x\n        let inline legend x = elem \"legend\" x\n        let inline meter x = elem \"meter\" x\n        let inline optgroup x = elem \"optgroup\" x\n        let inline option x = elem \"option\" x\n        let inline output x = elem \"output\" x\n        let inline progress x = elem \"progress\" x\n        let inline select x = elem \"select\" x\n        let inline textarea x = elem \"textarea\" x\n\n        // Interactive elements\n        let inline details x = elem \"details\" x\n        let inline dialog x = elem \"dialog\" x\n        let inline menu x = elem \"menu\" x\n        let inline menuitem x = elem \"menuitem\" x\n        let inline summary x = elem \"summary\" x\n\n    [<AutoOpen>]\n    module Attributes =\n        let inline attribute key value = Attribute.Attribute (key,value)\n        let inline property key value = Attribute.Property (key,value)\n\n    [<AutoOpen>]\n    module Events =\n        let inline onMouseEvent eventType f = EventHandlerBinding (MouseEventHandler (eventType, f))\n\n        let inline onMouseClick x = onMouseEvent \"onclick\" x\n        let inline onContextMenu x = onMouseEvent \"oncontextmenu\" x\n        let inline onDblClick x = onMouseEvent \"ondblclick\" x\n        let inline onMouseDown x = onMouseEvent \"onmousedown\" x\n        let inline onMouseEnter x = onMouseEvent \"onmouseenter\" x\n        let inline onMouseLeave x = onMouseEvent \"onmouseleave\" x\n        let inline onMouseMove x = onMouseEvent \"onmousemove\" x\n        let inline onMouseOut x = onMouseEvent \"onmouseout\" x\n        let inline onMouseOver x = onMouseEvent \"onmouseover\" x\n        let inline onMouseUp x = onMouseEvent \"onmouseup\" x\n        let inline onShow x = onMouseEvent \"onshow\" x\n        let inline onKeyboardEvent eventType f = EventHandlerBinding (KeyboardEventHandler (eventType, f))\n        let inline onKeydown x = onKeyboardEvent \"onkeydown\" x\n        let inline onKeypress x = onKeyboardEvent \"onkeypress\" x\n        let inline onKeyup x = onKeyboardEvent \"onkeyup\" x\n\n        let inline onEvent eventType f = EventHandlerBinding (EventHandler (eventType, f))\n        let inline onAbort x = onEvent \"onabort\" x\n        let inline onAfterPrint x = onEvent \"onafterprint\" x\n        let inline onAudioEnd x = onEvent \"onaudioend\" x\n        let inline onAudioStart x = onEvent \"onaudiostart\" x\n        let inline onBeforePrint x = onEvent \"onbeforeprint\" x\n        let inline onCached x = onEvent \"oncached\" x\n        let inline onCanPlay x = onEvent \"oncanplay\" x\n        let inline onCanPlayThrough x = onEvent \"oncanplaythrough\" x\n        let inline onChange x = onEvent \"onchange\" x\n        let inline onChargingChange x = onEvent \"onchargingchange\" x\n        let inline onChargingTimeChange x = onEvent \"onchargingtimechange\" x\n        let inline onChecking x = onEvent \"onchecking\" x\n        let inline onClose x = onEvent \"onclose\" x\n        let inline onDischargingTimeChange x = onEvent \"ondischargingtimechange\" x\n        let inline onDOMContentLoaded x = onEvent \"onDOMContentLoaded\" x\n        let inline onDownloading x = onEvent \"ondownloading\" x\n        let inline onDurationchange x = onEvent \"ondurationchange\" x\n        let inline onEmptied x = onEvent \"onemptied\" x\n        let inline onEnd x = onEvent \"onend\" x\n        let inline onEnded x = onEvent \"onended\" x\n        let inline onError x = onEvent \"onerror\" x\n        let inline onCullScreenChange x = onEvent \"onfullscreenchange\" x\n        let inline onCullScreenError x = onEvent \"onfullscreenerror\" x\n        let inline onInput x = onEvent \"oninput\" x\n        let inline onInvalid x = onEvent \"oninvalid\" x\n        let inline onLanguageChange x = onEvent \"onlanguagechange\" x\n        let inline onLevelChange x = onEvent \"onlevelchange\" x\n        let inline onLoadedData x = onEvent \"onloadeddata\" x\n        let inline onLoadedMetaData x = onEvent \"onloadedmetadata\" x\n        let inline onNoUpdate x = onEvent \"onnoupdate\" x\n        let inline onObsolete x = onEvent \"onobsolete\" x\n        let inline onOffline x = onEvent \"onoffline\" x\n        let inline onOnline x = onEvent \"ononline\" x\n        let inline onOpen x = onEvent \"onopen\" x\n        let inline onOrientationChange x = onEvent \"onorientationchange\" x\n        let inline onPause x = onEvent \"onpause\" x\n        let inline onPointerlockchange x = onEvent \"onpointerlockchange\" x\n        let inline onPointerlockerror x = onEvent \"onpointerlockerror\" x\n        let inline onPlay x = onEvent \"onplay\" x\n        let inline onPlaying x = onEvent \"onplaying\" x\n        let inline onRateChange x = onEvent \"onratechange\" x\n        let inline onReadyStateChange x = onEvent \"onreadystatechange\" x\n        let inline onReset x = onEvent \"onreset\" x\n        let inline onSeeked x = onEvent \"onseeked\" x\n        let inline onSeeking x = onEvent \"onseeking\" x\n        let inline onSelectStart x = onEvent \"onselectstart\" x\n        let inline onSelectionChange x = onEvent \"onselectionchange\" x\n        let inline onSoundEnd x = onEvent \"onsoundend\" x\n        let inline onSoundStart x = onEvent \"onsoundstart\" x\n        let inline onSpeechEnd x = onEvent \"onspeechend\" x\n        let inline onSpeechStart x = onEvent \"onspeechstart\" x\n        let inline onStalled x = onEvent \"onstalled\" x\n        let inline onStart x = onEvent \"onstart\" x\n        let inline onSubmit x = onEvent \"onsubmit\" x\n        let inline onSuccess x = onEvent \"onsuccess\" x\n        let inline onSuspend x = onEvent \"onsuspend\" x\n        let inline onTimeUpdate x = onEvent \"ontimeupdate\" x\n        let inline onUpdateReady x = onEvent \"onupdateready\" x\n        let inline onVoicesChanged x = onEvent \"onvoiceschanged\" x\n        let inline onVisibilityChange x = onEvent \"onvisibilitychange\" x\n        let inline onVolumeChange x = onEvent \"onvolumechange\" x\n        let inline onVrdisplayConnected x = onEvent \"onvrdisplayconnected\" x\n        let inline onVrdisplayDisconnected x = onEvent \"onvrdisplaydisconnected\" x\n        let inline onVrdisplayPresentChange x = onEvent \"onvrdisplaypresentchange\" x\n        let inline onWaiting x = onEvent \"onwaiting\" x\n\n        let inline onBlur x = onEvent \"onblur\" x\n        let inline onFocus x = onEvent \"onfocus\" x\n\n    [<AutoOpen>]\n    module Svg = \n        let svgNS = Attribute.Property(\"namespace\",\"http://www.w3.org/2000/svg\")\n        let inline svgElem tagName attrs children = Element((tagName, svgNS::attrs), children)\n\n        let inline svg x = svgElem \"svg\" x\n        let inline circle x = svgElem \"circle\" x \n        let inline rect x = svgElem \"rect\" x \n\n        let inline width x = attribute \"width\" x\n        let inline height x = attribute \"height\" x\n        let inline viewBox x = attribute \"viewBox\" x\n        let inline cx x = attribute \"cx\" x\n        let inline cy x = attribute \"cy\" x\n        let inline r x = attribute \"r\" x\n        let inline stroke x = attribute \"stroke\" x\n        let inline strokeWidth x = attribute \"stroke-width\" x\n        let inline fill x = attribute \"fill\" x\n\nopen Html\nopen Fable.Import.Browser\n\n[<AutoOpen>]\nmodule App =\n    type AppState<'TModel, 'TMessage> = {\n            Model: 'TModel\n            View: 'TModel -> Html.Types.Node<'TMessage>\n            Update: 'TModel -> 'TMessage -> ('TModel * ((unit -> unit) list)) }\n\n\n    type AppEvents<'TMessage, 'TModel> =\n        | ModelChanged of 'TModel*'TModel\n        | ActionReceived of 'TMessage\n        | DrawStarted\n\n    type Subscriber<'TMessage, 'TModel> = AppEvents<'TMessage, 'TModel> -> unit\n\n    type RenderState = \n        | InProgress\n        | NoRequest\n\n    type App<'TModel, 'TMessage> =\n        {\n            AppState: AppState<'TModel, 'TMessage>\n            JsCalls: (unit -> unit) list\n            Node: Node option\n            CurrentTree: obj option\n            Subscribers: Map<string, Subscriber<'TMessage, 'TModel>>\n            NodeSelector: string option\n            RenderState: RenderState\n        }\n\n    type ScheduleMessage = \n        | PingIn of float*(unit -> unit)\n\n    type AppMessage<'TMessage> =\n        | AddSubscriber of string*Subscriber<'TMessage, 'TMessage>\n        | RemoveSubscriber of string\n        | Message of 'TMessage\n        | Draw\n\n    type Renderer<'TMessage> =\n        {\n            Render: ('TMessage -> unit) -> Html.Types.Node<'TMessage> -> obj\n            Diff: obj -> obj -> obj\n            Patch: Fable.Import.Browser.Node -> obj -> Fable.Import.Browser.Node\n            CreateElement: obj -> Fable.Import.Browser.Node\n        }\n\n    let createApp appState =\n        {\n            AppState = appState\n            JsCalls = []\n            Node = None\n            CurrentTree = None\n            Subscribers = Map.empty\n            NodeSelector = None\n            RenderState = NoRequest\n        }\n\n    let withStartNode selector app = { app with NodeSelector = Some selector }\n    let withSubscriber subscriberId subscriber app =\n        let subsribers = app.Subscribers |> Map.add subscriberId subscriber\n        { app with Subscribers = subsribers }\n\n    let createScheduler() = \n        MailboxProcessor.Start(fun inbox ->\n            let rec loop() = \n                async {\n                    let! message = inbox.Receive()\n                    match message with\n                    | PingIn (milliseconds, cb) ->\n                        window.setTimeout(cb, milliseconds) |> ignore\n                        return! loop()\n                }\n            loop()\n        )\n\n    let start renderer app =\n        let renderTree view handler model =\n            view model\n            |> renderer.Render handler\n\n        let startElem =\n            match app.NodeSelector with\n            | None -> document.body\n            | Some sel -> document.body.querySelector(sel) :?> HTMLElement\n\n        \n        let scheduler = createScheduler()\n        MailboxProcessor.Start(fun inbox ->\n            let post message =\n                inbox.Post (Message message)\n\n            let notifySubscribers subs model =\n                subs |> Map.iter (fun key handler -> handler model)\n\n            let rec loop state =\n                async {\n                    match state.Node, state.CurrentTree with\n                    | None,_ ->\n                        let tree = renderTree state.AppState.View post state.AppState.Model\n                        let rootNode = renderer.CreateElement tree\n                        startElem.appendChild(rootNode) |> ignore\n                        return! loop {state with CurrentTree = Some tree; Node = Some rootNode}\n                    | Some rootNode, Some currentTree ->\n                        let! message = inbox.Receive()\n\n                        match message with\n                        | Message msg ->\n                            ActionReceived msg |> (notifySubscribers state.Subscribers)\n                            let (model', jsCalls) = state.AppState.Update state.AppState.Model msg\n\n                            let renderState =\n                                match state.RenderState with\n                                | NoRequest ->\n                                    scheduler.Post(PingIn(1000./60., (fun() -> inbox.Post(Draw))))\n                                    InProgress\n                                | InProgress -> InProgress\n                            return! loop {\n                                state with \n                                    AppState = { state.AppState with Model = model' }\n                                    RenderState = renderState\n                                    JsCalls = state.JsCalls @ jsCalls }\n                        | Draw -> \n                            match state.RenderState with\n                            | InProgress ->\n                                DrawStarted |> notifySubscribers state.Subscribers\n\n                                let model = state.AppState.Model\n\n                                let jsCalls = state.JsCalls\n                                let tree = renderTree state.AppState.View post model\n                                let patches = renderer.Diff currentTree tree\n                                renderer.Patch rootNode patches |> ignore\n                                jsCalls |> List.iter (fun i -> i())\n\n                                (ModelChanged (model, state.AppState.Model)) |> notifySubscribers state.Subscribers\n\n                                return! loop {state with RenderState = NoRequest; CurrentTree = Some tree; JsCalls = []}\n                            | NoRequest -> raise (exn \"Shouldn't happen\")\n                        | _ -> return! loop state\n                    | _ -> failwith \"Shouldn't happen\"\n                }\n            loop app)\n\nlet createTree<'T> (handler:'T -> unit) tag (attributes:Attribute<'T> list) children =\n    let toAttrs (attrs:Attribute<'T> list) =\n        let elAttributes = \n            attrs\n            |> List.map (function\n                | Attribute (k,v) -> (k ==> v) |> Some\n                | _ -> None)\n            |> List.choose id\n            |> (function | [] -> None | v -> Some (\"attributes\" ==> (createObj(v))))\n        let props =\n            attrs\n            |> List.filter (function | Attribute _ -> false | _ -> true)\n            |> List.map (function\n                | Attribute _ -> failwith \"Shouldn't happen\"\n                | Style style -> \"style\" ==> createObj(unbox style)\n                | Property (k,v) -> k ==> v\n                | EventHandlerBinding binding ->\n                    match binding with\n                    | MouseEventHandler(ev, f) -> ev ==> ((f >> handler) :> obj)\n                    | KeyboardEventHandler(ev, f) -> ev ==> ((f >> handler) :> obj)\n                    | EventHandler(ev, f) -> ev ==> ((f >> handler) :> obj)\n            )\n\n        match elAttributes with\n        | None -> props\n        | Some x -> x::props\n        |> createObj\n        |> (fun x -> Debug.WriteLine(\"Attributes: {0}\", x); x)\n    let elem = h(tag, toAttrs attributes, List.toArray children)\n    Debug.WriteLine(\"Elem: {0}\", elem)\n    elem\n\nlet rec render handler node =\n    match node with\n    | Element((tag,attrs), nodes)\n    | Svg((tag,attrs), nodes) -> createTree handler tag attrs (nodes |> List.map (render handler))\n    | VoidElement (tag, attrs) -> createTree handler tag attrs []\n    | Text str -> box(string str)\n    | WhiteSpace str -> box(string str)\n\nlet renderer =\n    {\n        Render = render\n        Diff = diff\n        Patch = patch\n        CreateElement = createElement\n    }"]}